// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  fullName     String
  cin          String?  @unique
  phone        String?
  role         Role     @default(CLIENT)
  status       UserStatus @default(PENDING)
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  mfaEnabled   Boolean  @default(false)
  mfaSecret    String?
  lastLogin    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  kycInfo      KycInfo?
  accounts     Account[]
  transactions Transaction[]
  checkbookRequests CheckbookRequest[]
  creditCardRequests CreditCardRequest[]
  accountOpeningRequests AccountOpeningRequest[]
  tfAccountRequests TFAccountRequest[]
  contactInquiries ContactInquiry[]
  documents    Document[]
  blogPosts    BlogPost[]

  @@map("users")
}

model KycInfo {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  dateOfBirth DateTime?
  placeOfBirth String?
  nationality  String?
  maritalStatus String?
  occupation   String?
  employer     String?
  monthlyIncome Decimal?
  
  // Address Information
  address      String?
  city         String?
  postalCode   String?
  country      String?
  
  // Identity Documents
  cinNumber    String?
  cinIssueDate DateTime?
  cinExpiryDate DateTime?
  passportNumber String?
  passportIssueDate DateTime?
  passportExpiryDate DateTime?
  
  // Banking Information
  bankName     String?
  accountNumber String?
  iban         String?
  
  // Status
  status       KycStatus @default(PENDING)
  reviewedBy   String?
  reviewedAt   DateTime?
  notes        String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("kyc_info")
}

model Account {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNumber String      @unique
  accountType   AccountType
  balance       Decimal     @default(0)
  currency      String      @default("TND")
  status        AccountStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  transactions  Transaction[]

  @@map("accounts")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  type        TransactionType
  amount      Decimal
  currency    String          @default("TND")
  description String?
  reference   String?
  status      TransactionStatus @default(COMPLETED)
  
  // For transfers
  fromAccount String?
  toAccount   String?
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("transactions")
}

model CheckbookRequest {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNumber String
  checkbookType String
  quantity    Int           @default(1)
  deliveryAddress String?
  status      RequestStatus @default(PENDING)
  notes       String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("checkbook_requests")
}

model CreditCardRequest {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardType    String
  creditLimit Decimal?
  monthlyIncome Decimal?
  employmentStatus String?
  status      RequestStatus @default(PENDING)
  notes       String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("credit_card_requests")
}

model AccountOpeningRequest {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType String
  initialDeposit Decimal?
  purpose     String?
  status      RequestStatus @default(PENDING)
  notes       String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("account_opening_requests")
}

model TFAccountRequest {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType String
  amount      Decimal
  duration    Int           // in months
  interestRate Decimal?
  status      RequestStatus @default(PENDING)
  notes       String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("tf_account_requests")
}

model ContactInquiry {
  id          String        @id @default(cuid())
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      InquiryStatus @default(OPEN)
  priority    Priority      @default(MEDIUM)
  assignedTo  String?
  response    String?
  respondedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("contact_inquiries")
}

model Document {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        DocumentType
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  status      DocumentStatus @default(PENDING)
  uploadedAt  DateTime     @default(now())
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?

  @@map("documents")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  coverImage  String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum Role {
  ADMIN
  CLIENT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum AccountType {
  CHECKING
  SAVINGS
  BUSINESS
  STUDENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  CIN
  PASSPORT
  SELFIE
  PROOF_OF_ADDRESS
  INCOME_STATEMENT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}